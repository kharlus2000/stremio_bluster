const { addonBuilder, serveHTTP } = require('stremio-addon-sdk');
const pirateBay = require('thepiratebay');

// <<< ALTERAÇÃO PRINCIPAL AQUI! >>>
// Aumentamos o número de resultados por página para 200.
const PAGE_SIZE = 200;

const builder = new addonBuilder({
    id: 'org.stremio.thepiratebay.plus.enhanced',
    version: '1.1.0',
    name: 'ThePirateBay+ Enhanced',
    description: 'Provides torrent streams from ThePirateBay. Enhanced to show 200 results per page.',
    resources: ['catalog', 'stream'],
    types: ['movie', 'series'],
    catalogs: [
        { type: 'movie', id: 'tpb_top_movies', name: 'TPB Top Movies' },
        { type: 'series', id: 'tpb_top_series', name: 'TPB Top Series' }
    ]
});

// Função para buscar no ThePirateBay
async function searchTPB(type, page = 0) {
    const category = type === 'movie' ? pirateBay.categories.VIDEO.MOVIES : pirateBay.categories.VIDEO.TV_SHOWS;
    try {
        const results = await pirateBay.topTorrents(category, page);
        // Limitamos ao tamanho da página definido
        return results.slice(0, PAGE_SIZE);
    } catch (err) {
        console.error('Error searching TPB:', err);
        return [];
    }
}

// Handler do Catálogo
builder.defineCatalogHandler(async ({ type, id, extra }) => {
    console.log(`Request for catalog: ${type} ${id}`);
    const page = extra.skip ? Math.floor(extra.skip / PAGE_SIZE) : 0;
    const results = await searchTPB(type, page);

    const metas = results.map(torrent => {
        return {
            id: `tpb:${torrent.id}`,
            type: type,
            name: torrent.name,
            posterShape: 'poster',
            poster: `https://images.metahub.space/poster/medium/${torrent.name}/img`, // Placeholder poster
            infoHash: torrent.infoHash // Adicionado para uso posterior
        };
    });

    return { metas: metas };
});

// Handler do Stream
builder.defineStreamHandler(async ({ type, id }) => {
    console.log(`Request for streams: ${type} ${id}`);
    if (!id.startsWith('tpb:')) {
        return { streams: [] };
    }

    const torrentId = id.split(':')[1];
    
    try {
        const torrentDetails = await pirateBay.getTorrent(torrentId);
        if (!torrentDetails || !torrentDetails.infoHash) {
            return { streams: [] };
        }

        const stream = {
            infoHash: torrentDetails.infoHash,
            name: 'ThePirateBay',
            title: torrentDetails.name,
            // Adiciona informações de seeders e leechers para o Stremio exibir
            behaviorHints: {
                bingeGroup: `tpb|${torrentDetails.infoHash}`,
                notWebReady: true
            },
            sources: [
              `tracker:udp://tracker.coppersurfer.tk:6969/announce`,
              `tracker:udp://tracker.openbittorrent.com:6969/announce`,
              `tracker:udp://9.rarbg.to:2710/announce`,
            ]
        };

        return { streams: [stream] };
    } catch (err) {
        console.error('Error getting torrent details:', err);
        return { streams: [] };
    }
});

// Inicia o servidor
const port = process.env.PORT || 7000;
serveHTTP(builder.getInterface(), { port });
console.log(`Addon server started on port ${port}`);
